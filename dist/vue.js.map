{"version":3,"file":"vue.js","sources":["../src/observer/array.js","../src/observer/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["import Vue from \"..\";\n\nlet oldArrayProtooMethods = Array.prototype;\n\n// 不能直接改写数组原有方法，不可靠，因为只有被vue控制的数组才需要改写\n\nexport let arrayMethods = Object.create(Array.prototype); // 创建一个元素，让链指向这个原型。arrayMethods继承Array.prototype。\n// arrayMethods.__proto__ === Array.prototype \n// arrayMethods拷贝了数组的原型，这样就可以添加自己的方法了\n\n/**\n    arrayMethods.__proto__.push // 拷贝了数组的原型\n\n    arrayMethods.push // 以添加自己的方法了\n\n    当数组调用push的时候，先找的是arrayMethods.push自己的方法，当arrayMethods上没有自己的push方法时，才会去arrayMethods.__proto__上找push方法\n */\n\n// vue2中修改原有数组中的length，是监控不到的\n\nlet methods = [// 只有这些数组方法才会改变原数组，其它的数组方法不会改变原数组，所以监听这些数组方法的调用就可以了\n    'push',\n    'pop',\n    'shift',\n    'unshift',\n    'splice',\n    'reverse',\n    'sort'\n];\n\nmethods.forEach(method => {// AOP切片编程\n    arrayMethods[method] = function (...args) { // 重写数组方法\n        // todo... 更新视图\n        console.log(\"改写后的\"+method);\n        let result = oldArrayProtooMethods[method].call(this, ...args);// this指向arrayMethods\n\n        // 这一坨代码是侦测数组里新增的数据的，向pop、shift和splice的删除数组元素的操作，没有写，但是vue2源码里也都写了\n        // 有可能用户新增的数据是对象格式，也需要进行拦截  'push','unshift','splice'都有增加功能\n        \n        let inserted;\n        let ob = this.__ob__;// （备注4）this是在./index.js文件里定义的  这里的this就是method在哪里被谁调用的，是在./index.js的Observer对象里的value调用的\n        switch (method) {\n            case 'push': \n            case 'unshift': \n                inserted = args;\n                break;\n            case 'splice': // xx.splice(0,1,xxx)\n                inserted = args.slice(2);\n                break;\n            default: break;\n        }\n\n        if (inserted) {\n            ob.observerArray(inserted); \n        }\n        \n        return result;\n    }\n})\n\n/** \nnew Vue({\n    data() {\n        return {\n            obj: {\n                a: [1,2,3]\n            }\n        };\n    }\n});\n\nvm.obj.a[0] = 4;// 是监控不到的，因为修改的是数组的索引上的值，但是vue中对数组的监控只监控了'push','pop','shift','unshift','splice','reverse','sort'这七个方法\n\nvue2中Map类型也不能监控，监控不到\n\n*/\n","import { arrayMethods } from \"./array\";\n\n// Observer类是干什么用的？\nclass Observer {\n    constructor(value) {// 需要对value属性重新定义\n\n        // value.__ob__ = this; // 自定义属性，能让./array.js中的（备注4）那里可以拿到this，进而使用observerArray()方法  但是这样写会有问题，如果value是对象，会一直走walk方法，循环死了，因为value.__ob__为this，this是对象，对象里面还是对象，就会一直走哦walk方法\n        // 那就想办法，让walk方法的forEach不能循环__ob__就可以了，因此使用Object.defineProperty来定义__ob__属性\n        Object.defineProperty(value, '__ob__', {\n            value: this,\n            enumerable: false,// 不能被枚举（表示不能被循环）\n            configurable: false // 不能删除此属性\n        });\n        // value可能是对象 可能是数组 分类来处理\n        if (Array.isArray(value)) {\n            // 数组不用defineProperty来进行代理，性能不好\n            // 那该怎么监听数组呢？\n            // 数组常用的方法有：push、shift、reverse、sort等，那么我们重写数组的这些方法，在里面加上更新的逻辑，这样就可以监听了\n            // value.__proto__ = arrayMethods; // 当是数组时，改写方法为自己重写后的方法 __proto__有兼容性问题，可以使用Object.setPrototypeOf()方法\n            Object.setPrototypeOf(value, arrayMethods);\n            \n            // 数组里的元素放的有可能是引用类型obejct 如果对象变化了 也需要更新视图\n\n            this.observerArray(value); // 处理的是原有数组中的对象\n\n        } else {\n            this.walk(value);// 把对象里的数据，一步一步地都变成响应式的\n        }\n    }\n    // 侦测数组变化\n    observerArray(value) {\n        for (let i=0; i < value.length; i++) {\n            observer(value[i]);\n        }\n    }\n    // 侦测对象变化的\n    walk(data) {\n        // 将对象中的所有key，重新用defineProperty定义成响应式的\n        Object.keys(data).forEach(key => {\n            defineReactive(data, key, data[key]);\n        })\n    }\n}\n\nexport function defineReactive(data, key, value) {\n\n    // value可能也是一个对象\n    observer(value);// （注释2）对结果递归拦截（如果data对象里的数据嵌套太深，那么会进行深层次的递归拦截，对性能有影响，所以vue2中数据嵌套不要过深，会浪费性能）\n    \n    Object.defineProperty(data, key, {\n        get() {\n            return value;\n        },\n        set(newValue) {\n            if (newValue === value) return;\n            observer(newValue); // （注释3）如果用户设置的是一个对象，就继续将用户设置的对象变成响应式的\n            value = newValue; \n        }\n    })\n}\n\nexport function observer(data) {\n    // 只能对对象类型进行侦测 非对象类型无法侦测\n    if (typeof data !== 'object' || data === null) {\n        return;\n    }\n    if (data.__ob__) { // 防止循环引用\n        return; // 要侦测的data如果有__ob__属性，说明这个data已经被侦测过了\n        // 因此在vue2里，如果看到某个object或者array数据里看到了__ob__，就说明这个对象已经被侦测过了\n    }\n    // 通过类来实现对数据的侦测 类可以方便扩展，会产生实例\n    return new Observer(data);// Observer是在原对象上监听数据的\n}\n\n/**\n    删除了元素，需要去掉侦测么？\n    无所谓，不太关心这个。因为如果数组里被删除的内容，如果是对象的话，也会触发重新侦测的，因为重写了数组的pop、shift和splice方法，vue2里面会重新侦测的\n    如果是对象的话，那就更会被重新侦测的\n */","import { observer } from \"./observer/index.js\";\n\n// vue的数据有哪些？按照vue初始化的顺序有：props methods data computed watch\nexport function initState(vm) {\n    // 将所有数据都定义在vm属性上，并且后续更改 需要触发视图更新\n    const opts = vm.$options; // 获取用户属性\n    if (opts.data) { // 数据的初始化\n        initData(vm);\n    }\n\n}\n\nfunction proxy(vm, source, key) {\n    // 代理属性    为了用户能直接通过vm拿到data里的属性\n    Object.defineProperty(vm, key, {\n        get() {\n            return vm[source][key];\n        },\n        set(newValue) {\n            vm[source][key] = newValue;\n        }\n    });\n}\n\nfunction initData(vm) {\n    // 数据劫持 Object.defineProperty\n    let data = vm.$options.data;\n    // 对data类型进行判断 如果是函数 获取函数返回值作为对象\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data;// (注释1)\n    // 通过vm._data获取劫持后的数据，用户就可以拿到_data了\n    // 将_data中的数据全部放到vm上\n    for (let key in data) {\n        proxy(vm, '_data', key);// vm.name => vm._data.name\n    }\n    // 侦测这个数据\n    observer(data);\n}\n\n","import { initState } from \"./state\";\n\nexport function initMixin(Vue) {\n    Vue.prototype._init = function (options) {\n        const vm = this;\n        vm.$options = options; // 实例上有个属性$options 表示的是用户传入的所有属性\n\n        // 初始化状态\n        initState(vm);\n    }\n}","// vue在2.0版本中就是一个构造函数\n\nimport { initMixin } from \"./init\";\n\nfunction Vue(options) {\n    this._init(options); // 当用户new Vue时，就调用init方法进行vue的初始化\n}\n// 可以拆分逻辑到不同的文件中，利于代码维护\ninitMixin(Vue);\n\n\nexport default Vue;"],"names":["oldArrayProtooMethods","Array","prototype","arrayMethods","Object","create","methods","forEach","method","console","log","args","result","call","inserted","ob","__ob__","slice","observerArray","Observer","value","defineProperty","enumerable","configurable","isArray","setPrototypeOf","walk","i","length","observer","data","keys","key","defineReactive","get","set","newValue","initState","vm","opts","$options","initData","proxy","source","_data","initMixin","Vue","_init","options"],"mappings":"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"}